<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>pengdon</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pengdon.github.io/"/>
  <updated>2020-04-28T10:51:43.422Z</updated>
  <id>https://pengdon.github.io/</id>
  
  <author>
    <name>don</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>express基础</title>
    <link href="https://pengdon.github.io/2020/04/28/express/"/>
    <id>https://pengdon.github.io/2020/04/28/express/</id>
    <published>2020-04-28T07:35:11.000Z</published>
    <updated>2020-04-28T10:51:43.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express-是什么"><a class="markdownIt-Anchor" href="#express-是什么"></a> Express 是什么？</h2><blockquote><p>官方概念：基于 Node.js 平台，快速、开放、极简的 Web 开发框架</p></blockquote><h2 id="优势"><a class="markdownIt-Anchor" href="#优势"></a> 优势</h2><ul><li>小巧灵活：Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能</li><li>易上手：express对web开发相关的模块进行了适度的封装，屏蔽了大量复杂繁琐的技术细节，让开发者只需要专注于业务逻辑的开发，极大的降低了入门和学习的成本</li><li>高性能：express仅在web应用相关的nodejs模块上进行了适度的封装和扩展，较大程度避免了过度封装导致的性能损耗</li><li>扩展性强：基于中间件的开发模式，使得express应用的扩展、模块拆分非常简单，既灵活，扩展性又强</li></ul><h2 id="怎么使用express"><a class="markdownIt-Anchor" href="#怎么使用express"></a> 怎么使用Express？</h2><p>1、安装express</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>2、代码最基本结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、引入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 2、创建 express 实例</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="comment">// 3、自定义路由， 响应HTTP的GET方法</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; res.send(<span class="string">'Hello World!'</span>))</span><br><span class="line"><span class="comment">// 4、监听3000端口请求</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>))</span><br></pre></td></tr></table></figure><p>3、一个典型的使用express的app.js，主要做了以下几件事：</p><ul><li>引入express模块</li><li>创建 express 实例</li><li>使用app.set设置express内部的一些参数(options)</li><li>使用app.use来注册函数</li><li>通过http.createServer用app来处理请求</li></ul><h2 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h2><p>1、作为资源服务器<br />2、开发web项目<br />3、作为中间件提供服务</p><h2 id="配置设置"><a class="markdownIt-Anchor" href="#配置设置"></a> 配置设置</h2><ul><li>express可以使用 set(setting,value)、 enable(setting)、disable(setting)方法来配置</li><li>下面是可以配置的变量：</li></ul><table><thead><tr><th>名称</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>env</td><td>定义环境模式字符串，如development,testing,production</td><td>process.env.NODE_ENV</td></tr><tr><td>trust proxy</td><td>启用/禁用反向代理的支持</td><td>false</td></tr><tr><td>jsonp callback name</td><td>定义JSONP请求的默认回调名称</td><td>?callback=</td></tr><tr><td>json replacer</td><td>定义JSON replacer回调函数</td><td>null</td></tr><tr><td>json spaces</td><td>指定当格式化JSON响应时使用的空格数量</td><td>开发中为2，在生产为0</td></tr><tr><td>case sensitive routing</td><td>启用/禁用区分大小写，如/home与/Home是不一样的</td><td>disabled</td></tr><tr><td>strict routing</td><td>启用/禁用严格的路由，如/home和/home/是不一样的</td><td>disabled</td></tr><tr><td>view cache</td><td>启用/禁用视图模板编译缓存</td><td>enabled</td></tr><tr><td>view engine</td><td>指定呈现模板时，如果从视图中省略了文件扩展名，应该使用的默认模板引擎扩展</td><td></td></tr><tr><td>views</td><td>指定模板引擎用来查找视图模板的路径</td><td>./views</td></tr></tbody></table><h2 id="配置路由"><a class="markdownIt-Anchor" href="#配置路由"></a> 配置路由</h2><ul><li>语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(path,[middleware],callback)</span><br><span class="line">app.post(path,[middleware],callback)</span><br><span class="line"><span class="comment">// middleware是回调函数执行前要应用的中间件函数</span></span><br><span class="line"><span class="comment">// callback是应该处理该请求并把响应发回给客户端的请求处理程序</span></span><br><span class="line"><span class="comment">// callback以Request对象作为第一个参数，以Response对象作为第二个参数</span></span><br></pre></td></tr></table></figure><ul><li>全路径匹配</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部路径的全局处理程序</span></span><br><span class="line">app.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>无参数场景</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 发送各种类型的响应</span></span><br><span class="line">    res.send(<span class="string">"get"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 发送各种类型的响应</span></span><br><span class="line">    res.send(<span class="string">"post"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>有参数场景</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getUserInfo'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> params = req.query; <span class="comment">// get传递过来的参数</span></span><br><span class="line">  res.send(<span class="string">"get params"</span>+params.id);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// eg: get 请求 /getUserInfo?id=u123</span></span><br><span class="line"><span class="comment">// params.id -&gt; u123</span></span><br></pre></td></tr></table></figure><ul><li>正则匹配参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="regexp">/^\/money\/(\w+)\:(\w+)?$/</span><span class="function">.<span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">'get money '</span> + req.params[<span class="number">0</span>] + req.params[<span class="number">1</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// eg: get 请求  /money/10:66</span></span><br><span class="line"><span class="comment">// req.params[0]-&gt;10  req.params[1]-&gt;66</span></span><br></pre></td></tr></table></figure><ul><li>已定义的参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/user/:userid'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">res.send(<span class="string">"Get User: "</span> + req.param(<span class="string">"userid"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// eg: get 请求  /user/u123</span></span><br><span class="line"><span class="comment">// req.param("userid") -&gt; u123</span></span><br></pre></td></tr></table></figure><ul><li>已定义的参数应用回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的next是一个用于已注册的下一个app.param()回调的回调函数，必须要在回调函数中的某处调用next()，否则回调链会被破坏。value是从URL路径解析的参数的值。</span></span><br><span class="line">app.param(param,<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next,value</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="request对象"><a class="markdownIt-Anchor" href="#request对象"></a> Request对象</h2><h3 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>originalUrl</td><td>请求的原始URL字符串</td></tr><tr><td>protocol</td><td>协议的字符串，如http或https</td></tr><tr><td>ip</td><td>请求的ip地址</td></tr><tr><td>path</td><td>请求的路径部分</td></tr><tr><td>host</td><td>请求的主机名</td></tr><tr><td>method</td><td>HTTP方法</td></tr><tr><td>query</td><td>请求的URL的查询字符串部分</td></tr><tr><td>fresh</td><td>一个布尔值，当最后修改与当前匹配时为true</td></tr><tr><td>stale</td><td>一个布尔值，当最后修改与当前匹配时为false</td></tr><tr><td>secure</td><td>一个布尔值，当建立TLS连接时为true</td></tr><tr><td>acceptsCharset(charset)</td><td>一个方法，如果由charset指定的字符集受支持，返回true</td></tr><tr><td>get(header)</td><td>返回header的值的方法</td></tr><tr><td>headers</td><td>请求标头的对象形式</td></tr></tbody></table><h2 id="response对象"><a class="markdownIt-Anchor" href="#response对象"></a> Response对象</h2><h3 id="设置标头"><a class="markdownIt-Anchor" href="#设置标头"></a> 设置标头</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>get(header)</td><td>返回指定的header参数的值</td></tr><tr><td>set(header,value)</td><td>设置header参数的值</td></tr><tr><td>set(headerObj)</td><td>接受一个对象，包括多个’header’:'value’属性</td></tr><tr><td>locatio(path)</td><td>把location标头设置为指定的path参数</td></tr><tr><td>type(type_string)</td><td>根据type_string参数设置Content-Type标头</td></tr><tr><td>attachment([filepath])</td><td>把Content-Disposition标头设置为attachment，并且如果指定filepath，则Content-Type头是基于文件扩展名设置的</td></tr></tbody></table><h3 id="设置状态"><a class="markdownIt-Anchor" href="#设置状态"></a> 设置状态</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>200</td><td>正确</td></tr><tr><td>300</td><td>Rediction重定向</td></tr><tr><td>400</td><td>Bad Request错误的请求</td></tr><tr><td>401</td><td>Unauthorized未经许可</td></tr><tr><td>403</td><td>Forbidden禁止</td></tr><tr><td>500</td><td>Server Error服务器错误</td></tr></tbody></table><h3 id="发送响应"><a class="markdownIt-Anchor" href="#发送响应"></a> 发送响应</h3><p>res.send(status,[body])<br />body是一个String或者Buffer对象，如果指定Buffer对象，内容类型就被自动设置为application/octet-stream(应用程序/八位字节流)</p><h3 id="发送json响应"><a class="markdownIt-Anchor" href="#发送json响应"></a> 发送JSON响应</h3><p>res.json(status,[object])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    app.set(<span class="string">'json spaces'</span>,<span class="number">4</span>);</span><br><span class="line">    res.json(&#123;<span class="attr">name</span>:<span class="string">'bob'</span>,<span class="attr">built</span>:<span class="string">'1223'</span>,<span class="attr">centers</span>:[<span class="string">'art'</span>,<span class="string">'maths'</span>]&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// jsonp callback name被设置为cb,意味着客户端需要在URL中传递的不是?callback=&lt;function&gt;，而是?cb=&lt;function&gt;</span></span><br><span class="line">app.get(<span class="string">'jsonp'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res,req</span>)</span>&#123;</span><br><span class="line">    app.set(<span class="string">'jsonp callback name'</span>,<span class="string">'cb'</span>);</span><br><span class="line">    res.jsonp(&#123;<span class="attr">name</span>:<span class="string">'bob'</span>,<span class="attr">built</span>:<span class="string">'1223'</span>,<span class="attr">centers</span>:[<span class="string">'art'</span>,<span class="string">'maths'</span>]&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="发送文件"><a class="markdownIt-Anchor" href="#发送文件"></a> 发送文件</h3><p>res.sendFile(path,[options],[callback])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path指向你要发送给客户端的文件，options参数是一个对象，</span></span><br><span class="line"><span class="comment">// 包含了一个maxAge属性定义的最长期限和root属性(用来支持path参数相对路径的根路径)</span></span><br><span class="line"><span class="comment">// 当文件传输完成时，回调函数被调用，并接受一个错误作为唯一的参数</span></span><br><span class="line">app.get(<span class="string">'/image'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.sendFile(<span class="string">'arch.jpg'</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1</span>,<span class="attr">root</span>:<span class="string">'./views'</span>&#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Error'</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Success'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="发送下载响应"><a class="markdownIt-Anchor" href="#发送下载响应"></a> 发送下载响应</h3><p>res.download(path,[filename],[callback])</p><h3 id="重定向响应"><a class="markdownIt-Anchor" href="#重定向响应"></a> 重定向响应</h3><p>res.redirect(path);</p><h2 id="中间件"><a class="markdownIt-Anchor" href="#中间件"></a> 中间件</h2><ol><li>Express提供的大部分功能是通过中间件函数完成的，这些中间件函数在nodejs收到请求的时点和发送响应的时点之间执行。Express的connect模块提供了中间件框架，让你方便的在全局或路径级别或为单个路由插入中间件功能。通过Express支持的中间件可以让你快速提供静态文件，实现cookie，支持会话，处理post数据等等，你甚至可以创建自己的自定义中间件函数，并利用它们来预处理请求和提供自己的功能。</li><li>有哪些中间件</li></ol><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>static</td><td>允许Express服务器以流式处理静态文件的GET请求，这个中间件是Express内置的，它可以通过express.static()访问</td></tr><tr><td>express-logger</td><td>实现一个格式化的请求记录器来在跟踪对服务器的请求</td></tr><tr><td>basic-auth-connect</td><td>提供对基本的HTTP身份验证的支持</td></tr><tr><td>cookie-parser</td><td>可以从请求读取cookie并在响应中设置cookie</td></tr><tr><td>cookie-session</td><td>提供基于cookie的会话支持</td></tr><tr><td>express-session</td><td>提供了一个强大的会话支持</td></tr><tr><td>body-parser</td><td>把POST请求正文中的JSON数据解析为req.body属性</td></tr><tr><td>compression</td><td>对发给客户端的大响应提供Gzip压缩支持</td></tr><tr><td>caurf</td><td>提供跨站点请求伪造保护</td></tr></tbody></table><ol start="3"><li>安装中间件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install 中间名称 --save</span><br></pre></td></tr></table></figure><ol start="4"><li>分配中间件<br />1&gt; 在全局范围内把中间件分配给某个路径</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要对所有路由指定中间件，可以在Express app对象上实现Use()方法：</span></span><br><span class="line"><span class="comment">// use([path],middleware)</span></span><br><span class="line"><span class="comment">// 其中，path是可选的，默认为/，意味着所有的路径，middleware是一个函数，</span></span><br><span class="line"><span class="comment">// 即function(req,res,next)&#123;&#125;，每个中间件函数都有一个构造函数，它返回相应的中间件功能。</span></span><br><span class="line"><span class="comment">// next是要执行的下一个中间件函数。</span></span><br><span class="line"><span class="comment">// 例如，把body-parser中间件应用于所有路径：</span></span><br><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser=<span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line">app.use(<span class="string">'/'</span>,bodyParser());</span><br></pre></td></tr></table></figure><p>2&gt; 把中间件分配到单个路由</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser=<span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line">app.get(<span class="string">'/parseRoute'</span>,bodyParser(),<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// coding</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3&gt; 添加多个中间件函数</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以根据需要在全局范围和路由上分配任意多的中间件函数</span></span><br><span class="line"><span class="keyword">var</span> express=<span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser=<span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser=<span class="built_in">require</span>)(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> session=<span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">var</span> app=express();</span><br><span class="line"><span class="comment">// 注意，你分配函数的顺序就是它们在请求中被应用的顺序。一些中间件需要被添加在别的中间件函数前面。</span></span><br><span class="line">app.use(<span class="string">'/'</span>,bodyParser()).use(<span class="string">'/'</span>,cookieParser()).use(<span class="string">'/'</span>,session());</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h2><p><strong>如何处理 404 响应？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">"Sorry can't find that!"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>如何设置一个错误处理器？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err.stack)</span><br><span class="line">  res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>如何渲染纯 HTML 文件？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过 res.sendFile() 直接对外输出 HTML 文件</span></span><br><span class="line">res.readFile(<span class="string">'index.html'</span>)</span><br><span class="line"><span class="comment">// 如果你需要对外提供的资源文件很多，可以使用 express.static() 中间件</span></span><br><span class="line">app.use(express.static(<span class="string">'htmls'</span>));</span><br></pre></td></tr></table></figure><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.expressjs.com.cn/" target="_blank" rel="noopener">Express</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;express-是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#express-是什么&quot;&gt;&lt;/a&gt; Express 是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官方概念：基于 Node.js 平台，快速、开放、极简的 We
      
    
    </summary>
    
    
      <category term="Node" scheme="https://pengdon.github.io/categories/Node/"/>
    
    
      <category term="Express" scheme="https://pengdon.github.io/tags/Express/"/>
    
      <category term="Node" scheme="https://pengdon.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>node开发环境配置</title>
    <link href="https://pengdon.github.io/2020/04/28/node/"/>
    <id>https://pengdon.github.io/2020/04/28/node/</id>
    <published>2020-04-28T06:57:46.000Z</published>
    <updated>2020-04-28T07:22:29.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前置条件"><a class="markdownIt-Anchor" href="#前置条件"></a> 前置条件</h2><p>1、开发软件安装目录 d:\dev</p><h2 id="node下载与安装"><a class="markdownIt-Anchor" href="#node下载与安装"></a> node下载与安装</h2><p>1、node官方下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br />2、安装node时选择自定义目录，例如：d:\dev\node</p><h2 id="系统环境变量配置win10"><a class="markdownIt-Anchor" href="#系统环境变量配置win10"></a> 系统环境变量配置(win10)</h2><p>1、修改当前用户下的系统变量path，添加node目录：d:\dev\node<br />2、在命令窗口执行node -v、npm -v,查看安装是否成功</p><h2 id="node配置"><a class="markdownIt-Anchor" href="#node配置"></a> node配置</h2><p>1、在d:\dev\node目录下新建两个文件夹，分别是node_global(全局包下载存放目录)和node_cache(node缓存)<br />2、执行命令，更改配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"d:\dev\node\node_global"</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"d:\dev\node\node_cache"</span></span><br></pre></td></tr></table></figure><p>3、查看配置文件内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用命令查看</span></span><br><span class="line">npm config ls</span><br></pre></td></tr></table></figure><p>4、修改当前用户下的系统变量path，添加d:\dev\node\node_global<br />5、在当前用户下新增系统变量，变量名：NODE_PATH 变量值：d:\dev\node\node_global\node_modules</p><h2 id="切换到淘宝镜像"><a class="markdownIt-Anchor" href="#切换到淘宝镜像"></a> 切换到淘宝镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前置条件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前置条件&quot;&gt;&lt;/a&gt; 前置条件&lt;/h2&gt;
&lt;p&gt;1、开发软件安装目录 d:\dev&lt;/p&gt;
&lt;h2 id=&quot;node下载与安装&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
    
      <category term="Node" scheme="https://pengdon.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://pengdon.github.io/tags/Node/"/>
    
      <category term="Npm" scheme="https://pengdon.github.io/tags/Npm/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli2.0版本 prerender 预渲染</title>
    <link href="https://pengdon.github.io/2020/04/28/prerender2/"/>
    <id>https://pengdon.github.io/2020/04/28/prerender2/</id>
    <published>2020-04-28T03:26:07.000Z</published>
    <updated>2020-04-28T03:47:29.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h3><p>node10^ 、 npm6^ 、vue-cli3</p><h3 id="简写"><a class="markdownIt-Anchor" href="#简写"></a> 简写</h3><p>-S --&gt; --save  // 生产阶段的依赖<br />-D --&gt; --save-dev  // 开发阶段的依赖</p><h3 id="预渲染"><a class="markdownIt-Anchor" href="#预渲染"></a> 预渲染</h3><p>1、先用手脚架创建个项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue2-prerender</span><br><span class="line"><span class="built_in">cd</span> vue2-prerender</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>2、项目大致结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-vue2-prerender</span><br><span class="line">--build</span><br><span class="line">--config</span><br><span class="line">--node_modules</span><br><span class="line">--src</span><br><span class="line">--static</span><br><span class="line">--test</span><br><span class="line">--.babelrc</span><br><span class="line">--.editorconfig</span><br><span class="line">--.eslintignore</span><br><span class="line">--.eslintrc.js</span><br><span class="line">--.gitignore</span><br><span class="line">--.postcssrc.js</span><br><span class="line">--index.html</span><br><span class="line">--package.json</span><br><span class="line">--package-lock.json</span><br><span class="line">--readme.md</span><br></pre></td></tr></table></figure><p>3、预渲染插件安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置镜像下载可以加速下载</span></span><br><span class="line">npm config <span class="built_in">set</span> PUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors &amp;&amp; npm install prerender-spa-plugin -D</span><br></pre></td></tr></table></figure><p>4、修改build目录下的webpack.prod.conf.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、引入依赖</span></span><br><span class="line"><span class="keyword">const</span> PrerenderSpaPlugin = <span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> Renderer = PrerenderSpaPlugin.PuppeteerRenderer</span><br><span class="line"><span class="comment">// 2、配置插件,在plugins数组里面添加预渲染插件</span></span><br><span class="line"><span class="keyword">new</span> PrerenderSpaPlugin(&#123;</span><br><span class="line">  staticDir: path.join(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">  routes: [<span class="string">'/'</span>, <span class="string">'/about'</span>],</span><br><span class="line">  renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">    inject: &#123;&#125;,</span><br><span class="line">    headless: <span class="literal">false</span>,</span><br><span class="line">    renderAfterDocumentEvent: <span class="string">'render-event'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5、修改mian.js文件，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">// 这句非常重要，否则预渲染将不会启动</span></span><br><span class="line">    <span class="built_in">document</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'render-event'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>6、修改router目录的index.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>, <span class="comment">// 预渲染一定要模式改成history</span></span><br><span class="line">  routes,</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>7、 执行构建打包命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>8、 可以看到根目录多了个dist文件夹，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-dist</span><br><span class="line">--about</span><br><span class="line">--static</span><br><span class="line">--favicon.ico</span><br><span class="line">--index.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前提&quot;&gt;&lt;/a&gt; 前提&lt;/h3&gt;
&lt;p&gt;node10^ 、 npm6^ 、vue-cli3&lt;/p&gt;
&lt;h3 id=&quot;简写&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://pengdon.github.io/categories/Vue/"/>
    
    
      <category term="vue" scheme="https://pengdon.github.io/tags/vue/"/>
    
      <category term="prerender-spa-plugin" scheme="https://pengdon.github.io/tags/prerender-spa-plugin/"/>
    
      <category term="seo" scheme="https://pengdon.github.io/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3.0版本 prerender 预渲染</title>
    <link href="https://pengdon.github.io/2020/04/28/prerender/"/>
    <id>https://pengdon.github.io/2020/04/28/prerender/</id>
    <published>2020-04-28T03:01:27.000Z</published>
    <updated>2020-04-28T03:33:41.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a class="markdownIt-Anchor" href="#前提"></a> 前提</h3><p>node10^ 、 npm6^ 、vue-cli3</p><h3 id="简写"><a class="markdownIt-Anchor" href="#简写"></a> 简写</h3><p>-S --&gt; --save  // 生产阶段的依赖<br />-D --&gt; --save-dev  // 开发阶段的依赖</p><h3 id="普通场景下的预渲染"><a class="markdownIt-Anchor" href="#普通场景下的预渲染"></a> 普通场景下的预渲染</h3><p>1、利用手脚架新建个项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue create vue3-prerender</span><br><span class="line"><span class="built_in">cd</span> vue3-prerender</span><br><span class="line">npm install</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>2、项目大致结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vue3-prerender</span><br><span class="line">--node_modules</span><br><span class="line">--public</span><br><span class="line">--src</span><br><span class="line">--tests</span><br><span class="line">--.browserslistrc</span><br><span class="line">--.editorconfig</span><br><span class="line">--.eslintrc.js</span><br><span class="line">--.gitignore</span><br><span class="line">--babel.config.js</span><br><span class="line">--jest.config.js</span><br><span class="line">--package.json</span><br><span class="line">--package-lock.json</span><br><span class="line">--README.md</span><br></pre></td></tr></table></figure><p>3、运行项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br><span class="line"><span class="comment"># 可以看到有两个视图Home、About</span></span><br></pre></td></tr></table></figure><p>4、预渲染插件安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置镜像下载可以加速下载</span></span><br><span class="line">npm config <span class="built_in">set</span> PUPPETEER_DOWNLOAD_HOST=https://npm.taobao.org/mirrors &amp;&amp; npm install prerender-spa-plugin -D</span><br></pre></td></tr></table></figure><p>5、新建vue.config.js文件配置预渲染,文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通场景下的预渲染</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> PrerenderSPAPlugin = <span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> Renderer = PrerenderSPAPlugin.PuppeteerRenderer</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath:<span class="string">'/'</span>,</span><br><span class="line">  configureWebpack:<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 生产环境</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 预渲染配置</span></span><br><span class="line">      <span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">        <span class="comment">// 默认输出是dist目录</span></span><br><span class="line">        staticDir: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        <span class="comment">// 必需，要渲染的路线，根据自己定义的路由配置</span></span><br><span class="line">        routes: [<span class="string">'/'</span>, <span class="string">'/about'</span>],</span><br><span class="line">        <span class="comment">// 必须，要使用的实际渲染器，没有则不能预编译</span></span><br><span class="line">        renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">          inject: &#123;&#125;,</span><br><span class="line">          headless: <span class="literal">false</span>, <span class="comment">// 渲染时显示浏览器窗口。对调试很有用。</span></span><br><span class="line">          renderAfterDocumentEvent: <span class="string">'render-event'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、修改main.js文件,修改后内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="comment">// 这句非常重要，否则预渲染将不会启动</span></span><br><span class="line">    <span class="built_in">document</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'render-event'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>7、修改router目录下的index.js文件，修改内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'About'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/About.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>, <span class="comment">// 预渲染一定要模式改成history</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>8、 执行构建打包命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>9、 可以看到根目录多了个dist文件夹，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-dist</span><br><span class="line">--about</span><br><span class="line">--static</span><br><span class="line">--favicon.ico</span><br><span class="line">--index.html</span><br></pre></td></tr></table></figure><ul><li>在vue.config.js的预渲染插件路由数组里面配置了几个路由就会生成相应的静态文件</li></ul><h3 id="特殊场景下的预渲染"><a class="markdownIt-Anchor" href="#特殊场景下的预渲染"></a> 特殊场景下的预渲染</h3><h4 id="场景描述"><a class="markdownIt-Anchor" href="#场景描述"></a> 场景描述</h4><p>1、例如公司主域名是 <a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a>，现在开发的项目是挂载在主域名下的子目录，也就是通过https://www.abc.com/edu访问<br />2、由于目前路由是history模式，子目录的场景需要改路由的base属性、vue.config.js的publicPath属性，影响到预渲染的其他配置</p><h4 id="具体操作针对普通场景配置做修改"><a class="markdownIt-Anchor" href="#具体操作针对普通场景配置做修改"></a> 具体操作针对普通场景配置做修改</h4><p>1、修改router目录下的index.js文件，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'Home'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    name: <span class="string">'About'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/About.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>, <span class="comment">// 预渲染一定要模式改成history</span></span><br><span class="line">  base: <span class="string">'/edu/'</span>, <span class="comment">// 这个根据实际场景自己配置，但要与vue.config.js文件中的publicPath属性保持一致</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>2、修改vue.config.js文件，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通场景下的预渲染</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> PrerenderSPAPlugin = <span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> Renderer = PrerenderSPAPlugin.PuppeteerRenderer</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === <span class="string">'production'</span>?<span class="string">'/edu/'</span>:<span class="string">'/'</span>,</span><br><span class="line">  outputDir: <span class="string">'dist/edu'</span>, </span><br><span class="line">  configureWebpack:<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 生产环境</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 预渲染配置</span></span><br><span class="line">      <span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">        staticDir: path.join(__dirname, <span class="string">'dist/'</span>),</span><br><span class="line">        outputDir: path.join(__dirname, <span class="string">'dist/edu'</span>),</span><br><span class="line">        indexPath: path.join(__dirname, <span class="string">'dist'</span>, <span class="string">'/edu/index.html'</span>),</span><br><span class="line">        <span class="comment">// 必需，要渲染的路线，根据自己定义的路由配置</span></span><br><span class="line">        routes: [<span class="string">'/'</span>, <span class="string">'/about'</span>],</span><br><span class="line">        <span class="comment">// 必须，要使用的实际渲染器，没有则不能预编译</span></span><br><span class="line">        renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">          inject: &#123;&#125;,</span><br><span class="line">          headless: <span class="literal">false</span>, <span class="comment">// 渲染时显示浏览器窗口。对调试很有用。</span></span><br><span class="line">          renderAfterDocumentEvent: <span class="string">'render-event'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 执行构建打包命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>4、 可以看到根目录多了个dist文件夹，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-dist</span><br><span class="line">--edu</span><br><span class="line">---about</span><br><span class="line">---static</span><br><span class="line">---favicon.ico</span><br><span class="line">---index.html</span><br></pre></td></tr></table></figure><h3 id="常见问题以及解决方案"><a class="markdownIt-Anchor" href="#常见问题以及解决方案"></a> 常见问题以及解决方案</h3><h4 id="问题1项目打包发布到服务器上后刷新页面会出现404问题"><a class="markdownIt-Anchor" href="#问题1项目打包发布到服务器上后刷新页面会出现404问题"></a> 问题1：项目打包发布到服务器上后，刷新页面会出现404问题</h4><blockquote><p><strong>原因</strong> 路由是history模式导致的<br /><strong>解决方案</strong> 修改服务器相关nginx.conf配置</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^/edu &#123;</span><br><span class="line">  try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html; <span class="comment"># 解决vue路由history模式打包到生产，刷新页面出现404的问题</span></span><br><span class="line">  index index.html index.htm;</span><br><span class="line">  <span class="keyword">if</span> ( !-e <span class="variable">$request_filename</span> ) &#123;</span><br><span class="line">    rewrite ^(.*) /edu/index.html;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关参考"><a class="markdownIt-Anchor" href="#相关参考"></a> 相关参考</h3><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue</a><br /><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue CLI</a><br /><a href="https://webpack.js.org/concepts/" target="_blank" rel="noopener">Webpack4^</a><br /><a href="https://github.com/neutrinojs/webpack-chain" target="_blank" rel="noopener">webpack-chain</a><br /><a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/#/" target="_blank" rel="noopener">puppeteer</a><br /><a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前提&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前提&quot;&gt;&lt;/a&gt; 前提&lt;/h3&gt;
&lt;p&gt;node10^ 、 npm6^ 、vue-cli3&lt;/p&gt;
&lt;h3 id=&quot;简写&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://pengdon.github.io/categories/Vue/"/>
    
    
      <category term="vue" scheme="https://pengdon.github.io/tags/vue/"/>
    
      <category term="prerender-spa-plugin" scheme="https://pengdon.github.io/tags/prerender-spa-plugin/"/>
    
      <category term="seo" scheme="https://pengdon.github.io/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript算法1</title>
    <link href="https://pengdon.github.io/2020/04/27/arithmetic/"/>
    <id>https://pengdon.github.io/2020/04/27/arithmetic/</id>
    <published>2020-04-27T01:23:56.950Z</published>
    <updated>2020-04-28T06:56:32.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><h3 id="1-输出没有连续重复字符的组合数"><a class="markdownIt-Anchor" href="#1-输出没有连续重复字符的组合数"></a> 1. 输出没有连续重复字符的组合数</h3><blockquote><p><strong>问题描述</strong>：把一个字符串中的所有的字符重新排列，然后生成一个新的字符串，返回的新字符串中没有连续重复的字符。连续重复是以单个字符为判断标准。<br />例如：aab应该返回 2， 因为它总共有 6 种排列方式： aab， aab， aba， aba， baa， baa，但是其中只有 2 个没有连续重复的字符（字符 a 是本例中的重复字符）：aba，aba</p></blockquote><blockquote><p><strong>预期结果</strong>：<br />permAlone(“aab”)应该返回 2。<br />permAlone(“aaa”)应该返回 0。<br />permAlone(“aabb”)应该返回 8。<br />permAlone(“abcdefa”)应该返回 3600。<br />permAlone(“abfdefa”)应该返回 2640。<br />permAlone(“aaab”)应该返回 0。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> permAlone(str) &#123;</span><br><span class="line">    // 匹配是否有重复字符</span><br><span class="line">    <span class="built_in">let</span> reg = /(\w)\1+/g;</span><br><span class="line">    <span class="keyword">if</span> (str.match(reg) !== null &amp;&amp; str.match(reg)[0] === str) <span class="built_in">return</span> 0;</span><br><span class="line">    <span class="built_in">let</span> arr = str.split(<span class="string">''</span>);</span><br><span class="line">    // 利用es6解构赋值交换元素位置</span><br><span class="line">    <span class="keyword">function</span> swap(n1,n2)&#123;</span><br><span class="line">        [arr[n1],arr[n2]] = [arr[n2],arr[n1]]</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">let</span> tempArr = [];</span><br><span class="line">    <span class="keyword">function</span> generate(len)&#123;</span><br><span class="line">        <span class="keyword">if</span>(len === 1 &amp;&amp; !arr.join(<span class="string">''</span>).match(reg))&#123;</span><br><span class="line">            tempArr.push(arr.join(<span class="string">''</span>))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">let</span> i = 0; i!=len;++i)&#123;</span><br><span class="line">                generate(len-1);</span><br><span class="line">                swap(len%2?0:i,len-1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    generate(arr.length) </span><br><span class="line">    // 利用filter去重返回新数组</span><br><span class="line">    <span class="built_in">return</span> tempArr.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-输出对等分差"><a class="markdownIt-Anchor" href="#2-输出对等分差"></a> 2. 输出对等分差</h3><blockquote><p><strong>问题描述</strong>：两个集合的对称差分是只属于其中一个集合，而不属于另一个集合的元素组成的集合，例如：集合let A = [ 1, 2, 3]和let B = [ 2, 3, 4]的对称差分为A △ B = C = [ 1, 4]。 集合论中的这个运算相当于布尔逻辑中的异或运算。<br />设定两个数组 (例如：let A = [1, 2, 3]，let B = [2, 3, 4])作为参数传入，返回对称差分数组（A △ B = C = [1, 4]），且数组中没有重复项。</p></blockquote><blockquote><p><strong>预期结果</strong>：<br />sym([1, 2, 3, 3], [5, 2, 1, 4])应该返回[3, 4, 5]。<br />sym([1, 2, 3], [5, 2, 1, 4, 5])应该返回[3, 4, 5]。<br />sym([1, 2, 5], [2, 3, 5], [3, 4, 5])应该返回[1, 4, 5]。<br />sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5])应该返回[1, 4, 5]。<br />sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3])应该返回[2, 3, 4, 6, 7]。<br />sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1])应该返回[1, 2, 4, 5, 6, 7, 8, 9]。</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> sym(...args) &#123;</span><br><span class="line">    // 利用reduce组合数据，再利用Set去重</span><br><span class="line">    <span class="built_in">return</span> [...new Set(args.reduce(diffArray))].sort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 区分两个数组,返回不同部分</span><br><span class="line"><span class="keyword">function</span> diffArray(arr1, arr2) &#123;</span><br><span class="line">   <span class="built_in">return</span> arr1</span><br><span class="line">        .filter(element =&gt; !arr2.includes(element))</span><br><span class="line">        .concat(arr2.filter(element =&gt; !arr1.includes(element)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/h2&gt;
&lt;h3 id=&quot;1-输出没有连续重复字符的组合数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-输出没有连续重复字符的组合数&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Arithmetic" scheme="https://pengdon.github.io/categories/Arithmetic/"/>
    
    
      <category term="Javascript" scheme="https://pengdon.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>nextjs+typescript</title>
    <link href="https://pengdon.github.io/2019/11/14/nextjs/"/>
    <id>https://pengdon.github.io/2019/11/14/nextjs/</id>
    <published>2019-11-14T12:11:27.000Z</published>
    <updated>2020-04-28T01:41:32.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><h4 id="1-先创建一个最基础的nextjs项目"><a class="markdownIt-Anchor" href="#1-先创建一个最基础的nextjs项目"></a> 1. 先创建一个最基础的Nextjs项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir next-ts</span><br><span class="line"><span class="built_in">cd</span> next-ts</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save react react-dom next</span><br><span class="line">mkdir pages</span><br></pre></td></tr></table></figure><h4 id="2-添加typescipt和types相关依赖"><a class="markdownIt-Anchor" href="#2-添加typescipt和types相关依赖"></a> 2. 添加Typescipt和@types相关依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript @types/react @types/node</span><br></pre></td></tr></table></figure><h4 id="3-修改next-ts目录下packagejson文件中scripts属性的内容"><a class="markdownIt-Anchor" href="#3-修改next-ts目录下packagejson文件中scripts属性的内容"></a> 3. 修改next-ts目录下package.json文件中scripts属性的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"next"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"next build"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"next start"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-在pages目录下创建indextsx文件文件内容如下"><a class="markdownIt-Anchor" href="#4-在pages目录下创建indextsx文件文件内容如下"></a> 4. 在pages目录下创建index.tsx文件，文件内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const Home = () =&gt; &lt;h1&gt;Nextjs typescript!&lt;/h1&gt;;</span><br><span class="line"><span class="built_in">export</span> default Home;</span><br></pre></td></tr></table></figure><h4 id="5-启动dev-server查看效果"><a class="markdownIt-Anchor" href="#5-启动dev-server查看效果"></a> 5. 启动dev server查看效果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础&quot;&gt;&lt;/a&gt; 基础&lt;/h3&gt;
&lt;h4 id=&quot;1-先创建一个最基础的nextjs项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-先创建一个最基础
      
    
    </summary>
    
    
      <category term="React-SSR" scheme="https://pengdon.github.io/categories/React-SSR/"/>
    
    
      <category term="nextjs" scheme="https://pengdon.github.io/tags/nextjs/"/>
    
  </entry>
  
  <entry>
    <title>vue-ssr基本用法</title>
    <link href="https://pengdon.github.io/2019/11/14/vueSsr1/"/>
    <id>https://pengdon.github.io/2019/11/14/vueSsr1/</id>
    <published>2019-11-14T12:11:27.000Z</published>
    <updated>2020-04-28T06:18:04.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a class="markdownIt-Anchor" href="#基础"></a> 基础</h3><h4 id="1-先创建一个最基础的nextjs项目"><a class="markdownIt-Anchor" href="#1-先创建一个最基础的nextjs项目"></a> 1. 先创建一个最基础的Nextjs项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir vue-srr-demo</span><br><span class="line"><span class="built_in">cd</span> vue-srr-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install vue vue-server-renderer --save</span><br></pre></td></tr></table></figure><h4 id="2-创建一个appjs文件内容如下"><a class="markdownIt-Anchor" href="#2-创建一个appjs文件内容如下"></a> 2. 创建一个app.js文件,内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Vue = require(<span class="string">'vue'</span>)</span><br><span class="line">module.exports = <span class="keyword">function</span> createApp (context) &#123;</span><br><span class="line">    <span class="built_in">return</span> new Vue(&#123;</span><br><span class="line">        data: &#123;</span><br><span class="line">          url: context.url</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `&lt;div&gt;Vue SSR URL: &#123;&#123; url &#125;&#125;&lt;/div&gt;`</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-与服务器集成"><a class="markdownIt-Anchor" href="#3-与服务器集成"></a> 3. 与服务器集成</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><h4 id="4-创建一个serverjs文件内容如下"><a class="markdownIt-Anchor" href="#4-创建一个serverjs文件内容如下"></a> 4. 创建一个server.js文件,内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const server = require(<span class="string">'express'</span>)()</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/ssr'</span>, (request, response) =&gt; &#123;</span><br><span class="line">   response.send(<span class="string">"当前访问URL "</span>+request.url)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8000)</span><br></pre></td></tr></table></figure><h4 id="5-创建一个页面模板indexhtml内容如下"><a class="markdownIt-Anchor" href="#5-创建一个页面模板indexhtml内容如下"></a> 5. 创建一个页面模板index.html,内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--vue-ssr-outlet--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6-修改serverjs文件内容如下"><a class="markdownIt-Anchor" href="#6-修改serverjs文件内容如下"></a> 6. 修改server.js文件，内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const server = require(<span class="string">'express'</span>)()</span><br><span class="line">const createApp = require(<span class="string">'./app'</span>)</span><br><span class="line">const renderer = require(<span class="string">'vue-server-renderer'</span>).createRenderer()</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/ssr'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    const context = &#123; url: request.url &#125;</span><br><span class="line">    const app = createApp(context)</span><br><span class="line">    renderer.renderToString(app, (err, doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) throw err</span><br><span class="line">    response.send(doc)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8000)</span><br></pre></td></tr></table></figure><h4 id="7-启动服务查看效果"><a class="markdownIt-Anchor" href="#7-启动服务查看效果"></a> 7. 启动服务查看效果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line"><span class="comment"># 或者安装nodemon自动重启插件[npm install -g  nodemon]</span></span><br><span class="line">nodemon server.js</span><br></pre></td></tr></table></figure><h4 id="8-在浏览器访问httplocalhost8000ssr"><a class="markdownIt-Anchor" href="#8-在浏览器访问httplocalhost8000ssr"></a> 8. 在浏览器访问：<a href="http://localhost:8000/ssr" target="_blank" rel="noopener">http://localhost:8000/ssr</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue SSR URL: /ssr</span><br></pre></td></tr></table></figure><h4 id="9-模板插值修改indexhtml"><a class="markdownIt-Anchor" href="#9-模板插值修改indexhtml"></a> 9. 模板插值，修改index.html</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span><br><span class="line">    &#123;&#123;&#123; meta &#125;&#125;&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--vue-ssr-outlet--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="10-修改serverjs文件内容如下"><a class="markdownIt-Anchor" href="#10-修改serverjs文件内容如下"></a> 10. 修改server.js文件，内容如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const server = require(<span class="string">'express'</span>)()</span><br><span class="line">const createApp = require(<span class="string">'./app'</span>)</span><br><span class="line">const renderer = require(<span class="string">'vue-server-renderer'</span>).createRenderer(&#123;</span><br><span class="line">    template: require(<span class="string">'fs'</span>).readFileSync(<span class="string">'./index.html'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">'/ssr'</span>, (request, response) =&gt; &#123;</span><br><span class="line">    const context = &#123;</span><br><span class="line">        url: request.url, </span><br><span class="line">        title: <span class="string">'vue-ssr'</span>, </span><br><span class="line">        meta: </span><br><span class="line">            `</span><br><span class="line">            &lt;meta ...&gt;</span><br><span class="line">            &lt;meta ...&gt;</span><br><span class="line">            `</span><br><span class="line">        &#125;</span><br><span class="line">    const app = createApp(context)</span><br><span class="line">    renderer.renderToString(app, context, (err, doc) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) throw err</span><br><span class="line">        response.send(doc)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(8000)</span><br></pre></td></tr></table></figure><h4 id="11-启动服务查看网页源代码发现title和meta标签成功插入"><a class="markdownIt-Anchor" href="#11-启动服务查看网页源代码发现title和meta标签成功插入"></a> 11. 启动服务，查看网页源代码，发现title和meta标签成功插入</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line"><span class="comment"># 或者安装nodemon自动重启插件[npm install -g  nodemon]</span></span><br><span class="line">nodemon server.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础&quot;&gt;&lt;/a&gt; 基础&lt;/h3&gt;
&lt;h4 id=&quot;1-先创建一个最基础的nextjs项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-先创建一个最基础
      
    
    </summary>
    
    
      <category term="Vue-SSR" scheme="https://pengdon.github.io/categories/Vue-SSR/"/>
    
    
      <category term="vue" scheme="https://pengdon.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
